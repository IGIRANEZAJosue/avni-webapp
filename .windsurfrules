# Avni WebApp Windsurf Rules
version: 1.0.0

# Code Style and Formatting
style:
  javascript:
    indent: 2
    quotes: double
    semicolons: true
    max_line_length: 120
    trailing_comma: es5
    arrow_parens: avoid
    
# Code Structure and Modularity
modularity:
  principles:
    - Create small, focused functions with a single responsibility
    - Limit function size to improve readability and testability
    - Extract complex logic into separate utility functions
    - Use pure functions wherever possible
    - Avoid deep nesting of functions and control structures
  
  refactoring:
    - Make incremental, targeted changes rather than large rewrites
    - Refactor one component or function at a time
    - Maintain backward compatibility during refactoring
    - Add tests before refactoring to ensure behavior is preserved
    - Document the purpose and approach of each refactoring

# Testing Requirements
testing:
  coverage:
    minimum: 80
    paths:
      - src/dataEntryApp/reducers/
    exclude:
      - "**/*.test.js"
  
  requirements:
    - All validation functions must have corresponding test cases
    - Tests must cover both success and failure scenarios
    - Question group validation must test both repeatable and non-repeatable groups
    - Edge cases (null values, empty arrays) must be tested
  
  # Test Structure and Organization
  structure:
    - Use descriptive test names that explain what is being tested
    - Group related tests using nested describe blocks
    - Use beforeEach for common test setup
    - Isolate tests to prevent state leakage between tests
    - Follow the Arrange-Act-Assert pattern in test cases
  
  # Test Assertions
  assertions:
    - Use specific assertions (e.g., assert.equal instead of assert.isTrue)
    - Include descriptive error messages in assertions
    - Test one concept per test case
    - Verify both positive and negative cases
  
  # Test Data and Dependencies
  test_data:
    - Prefer real objects and actual implementations over mocks
    - Use factory methods to create consistent test data
    - Initialize test objects with minimal required properties
    - Create proper test fixtures that represent real-world scenarios
    - When testing components that depend on others, use the actual dependencies
  
  # Avoiding Mocks
  avoid_mocks:
    - Do not use mocks unless absolutely necessary
    - When testing interactions between components, use real implementations
    - For external services, prefer controlled test instances over mocks
    - If mocking is required, limit it to external system boundaries only
    - Document any use of mocks with a clear justification
  
  # Running Tests
  execution:
    commands:
      - "yarn test": Run all tests
      - "yarn test --testNamePattern=\"pattern\"": Run tests matching pattern
      - "yarn test src/path/to/file.test.js": Run tests in specific file
      - "yarn test --watch": Run tests in watch mode
    
    best_practices:
      - Run tests before committing changes
      - Fix failing tests immediately
      - Run focused tests during development
      - Run the full test suite before submitting pull requests

# Code Quality
quality:
  complexity:
    max_cyclomatic_complexity: 15
    max_cognitive_complexity: 20
  
  maintainability:
    max_function_length: 50
    max_parameter_count: 7
    max_nesting_depth: 3
  
  patterns:
    functional:
      prefer: true
      rules:
        - Prefer pure functions over stateful classes
        - Use immutable data structures
        - Avoid side effects in validation functions
        - Use composition over inheritance
    
    naming:
      - Use descriptive function names that indicate purpose
      - Validation functions should be prefixed with 'validate'
      - Helper functions should be named descriptively
      - Test files should be named with .test.js suffix
  
  # Code Cleanliness
  cleanliness:
    - Remove unused variables, imports, and functions
    - Avoid commented-out code; use version control instead
    - Keep files focused on a single responsibility
    - Maintain consistent formatting throughout the codebase
  
  # Common Pitfalls to Avoid
  avoid:
    - Never declare functions within loops
    - Avoid modifying function parameters
    - Don't use global variables for component state
    - Avoid complex nested ternary expressions
    - Don't use magic numbers or strings without constants

# Yarn Package Management
package_management:
  commands:
    - "yarn install": Install dependencies
    - "yarn add <package>": Add a production dependency
    - "yarn add <package> --dev": Add a development dependency
    - "yarn remove <package>": Remove a dependency
    - "yarn upgrade <package>": Upgrade a dependency
  
  best_practices:
    - Keep yarn.lock in version control
    - Run yarn install after pulling changes
    - Use exact versions for critical dependencies
    - Document new dependencies in README or documentation
    - Regularly update dependencies for security fixes

# Performance
performance:
  rules:
    - Avoid deep nesting of loops in validation functions
    - Minimize redundant validation checks
    - Use early returns for validation failures
    - Cache validation results when appropriate
    - Write performance-sensitive tests separately with appropriate timeouts

# Documentation
documentation:
  requirements:
    - All public functions must have JSDoc comments
    - Complex validation logic must include explanatory comments
    - Parameter types and return values must be documented
    - Include examples in documentation for complex functions
    - Document the reasoning behind implementation choices

# Specific Rules for Form Validation
form_validation:
  rules:
    - Validation functions should be pure and return new validation results
    - Question group validation should handle both repeatable and non-repeatable groups
    - Null checks must be performed before accessing properties
    - Form element validation must respect the mandatory flag
    - Validation error messages should be clear and actionable
    - Validation functions should handle edge cases gracefully